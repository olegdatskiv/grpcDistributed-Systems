# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ReplicatedLog_pb2 as ReplicatedLog__pb2


class PostRequestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostRequest = channel.unary_unary(
                '/PostRequestService/PostRequest',
                request_serializer=ReplicatedLog__pb2.POST.SerializeToString,
                response_deserializer=ReplicatedLog__pb2.POSTResponse.FromString,
                )


class PostRequestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PostRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PostRequestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PostRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.PostRequest,
                    request_deserializer=ReplicatedLog__pb2.POST.FromString,
                    response_serializer=ReplicatedLog__pb2.POSTResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PostRequestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PostRequestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PostRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PostRequestService/PostRequest',
            ReplicatedLog__pb2.POST.SerializeToString,
            ReplicatedLog__pb2.POSTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GetRequestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRequest = channel.unary_unary(
                '/GetRequestService/GetRequest',
                request_serializer=ReplicatedLog__pb2.GET.SerializeToString,
                response_deserializer=ReplicatedLog__pb2.GETResponse.FromString,
                )


class GetRequestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetRequestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRequest,
                    request_deserializer=ReplicatedLog__pb2.GET.FromString,
                    response_serializer=ReplicatedLog__pb2.GETResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GetRequestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GetRequestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GetRequestService/GetRequest',
            ReplicatedLog__pb2.GET.SerializeToString,
            ReplicatedLog__pb2.GETResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AskHeartBeatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeatRequest = channel.unary_unary(
                '/AskHeartBeatService/HeartBeatRequest',
                request_serializer=ReplicatedLog__pb2.AskHeartBeat.SerializeToString,
                response_deserializer=ReplicatedLog__pb2.HeartBeat.FromString,
                )


class AskHeartBeatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HeartBeatRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AskHeartBeatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeatRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeatRequest,
                    request_deserializer=ReplicatedLog__pb2.AskHeartBeat.FromString,
                    response_serializer=ReplicatedLog__pb2.HeartBeat.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AskHeartBeatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AskHeartBeatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HeartBeatRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AskHeartBeatService/HeartBeatRequest',
            ReplicatedLog__pb2.AskHeartBeat.SerializeToString,
            ReplicatedLog__pb2.HeartBeat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AskHeartBeatsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeatRequest = channel.unary_unary(
                '/AskHeartBeatsService/HeartBeatRequest',
                request_serializer=ReplicatedLog__pb2.AskHeartBeat.SerializeToString,
                response_deserializer=ReplicatedLog__pb2.HeartBeats.FromString,
                )


class AskHeartBeatsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HeartBeatRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AskHeartBeatsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeatRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeatRequest,
                    request_deserializer=ReplicatedLog__pb2.AskHeartBeat.FromString,
                    response_serializer=ReplicatedLog__pb2.HeartBeats.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AskHeartBeatsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AskHeartBeatsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HeartBeatRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AskHeartBeatsService/HeartBeatRequest',
            ReplicatedLog__pb2.AskHeartBeat.SerializeToString,
            ReplicatedLog__pb2.HeartBeats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
